name: Build, test, publish
description: Build, optionally test, and optionally publish to NPM

inputs:
  secrets:
    description: JSON representation of workflow secrets object
    required: true
  vars:
    description: JSON representation of workflow vars object
    required: true

runs:
  using: composite

  steps:
    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ fromJSON(inputs.vars).NODE_VERSION }}
        registry-url: https://registry.npmjs.org/

    - name: Checkout
      uses: actions/checkout@v4

    - name: Start terminal session (pre build)
      if: fromJSON(inputs.vars).TERMINAL_PRE_BUILD == 'true'
      uses: mxschmitt/action-tmate@v3

    - name: Build
      shell: bash
      run: |
        npm install
        
        # Project must have build-dist script.
        npm run build-dist

    - name: Start terminal session (post build)
      if: fromJSON(inputs.vars).TERMINAL_POST_BUILD == 'true'
      uses: mxschmitt/action-tmate@v3

    - name: Test
      shell: bash
      run: |
        # Run test script if present.
        npm run test --if-present

    - name: Publish
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ fromJSON(inputs.secrets).NODE_AUTH_TOKEN }}
      run: |
        # Get the tag on the version property if any.
        tag=`grep "^  \"version\": " package.json | cut -d "\"" -f4 -s | cut -d "-" -f2 -s`
        
        # If release is not official, tag it with the release phase.
        if [ "$tag" != "" ]
        then
          tag_args="--tag $tag"
        fi
        
        if [ "${{ github.event_name }}" != "release" ]
        then
          dry_run_arg="--dry-run"
        fi
        
        # Create .npmignore to exclude hidden directories.
        echo /.\*/ > .npmignore
        
        npm publish --access public $tag_args $dry_run_arg
